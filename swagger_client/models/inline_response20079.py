# coding: utf-8

"""
    API

    ## Welcome  This is a place to put general notes and extra information, for internal use.  To get started designing/documenting this API, select a version on the left. # Title No Description  # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class InlineResponse20079(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'overview': 'str',
        'poster_path': 'Object',
        'backdrop_path': 'str',
        'parts': 'list[InlineResponse20079Parts]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'overview': 'overview',
        'poster_path': 'poster_path',
        'backdrop_path': 'backdrop_path',
        'parts': 'parts'
    }

    def __init__(self, id=None, name=None, overview=None, poster_path=None, backdrop_path=None, parts=None):  # noqa: E501
        """InlineResponse20079 - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._overview = None
        self._poster_path = None
        self._backdrop_path = None
        self._parts = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if overview is not None:
            self.overview = overview
        if poster_path is not None:
            self.poster_path = poster_path
        if backdrop_path is not None:
            self.backdrop_path = backdrop_path
        if parts is not None:
            self.parts = parts

    @property
    def id(self):
        """Gets the id of this InlineResponse20079.  # noqa: E501


        :return: The id of this InlineResponse20079.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20079.


        :param id: The id of this InlineResponse20079.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this InlineResponse20079.  # noqa: E501


        :return: The name of this InlineResponse20079.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse20079.


        :param name: The name of this InlineResponse20079.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def overview(self):
        """Gets the overview of this InlineResponse20079.  # noqa: E501


        :return: The overview of this InlineResponse20079.  # noqa: E501
        :rtype: str
        """
        return self._overview

    @overview.setter
    def overview(self, overview):
        """Sets the overview of this InlineResponse20079.


        :param overview: The overview of this InlineResponse20079.  # noqa: E501
        :type: str
        """

        self._overview = overview

    @property
    def poster_path(self):
        """Gets the poster_path of this InlineResponse20079.  # noqa: E501


        :return: The poster_path of this InlineResponse20079.  # noqa: E501
        :rtype: Object
        """
        return self._poster_path

    @poster_path.setter
    def poster_path(self, poster_path):
        """Sets the poster_path of this InlineResponse20079.


        :param poster_path: The poster_path of this InlineResponse20079.  # noqa: E501
        :type: Object
        """

        self._poster_path = poster_path

    @property
    def backdrop_path(self):
        """Gets the backdrop_path of this InlineResponse20079.  # noqa: E501


        :return: The backdrop_path of this InlineResponse20079.  # noqa: E501
        :rtype: str
        """
        return self._backdrop_path

    @backdrop_path.setter
    def backdrop_path(self, backdrop_path):
        """Sets the backdrop_path of this InlineResponse20079.


        :param backdrop_path: The backdrop_path of this InlineResponse20079.  # noqa: E501
        :type: str
        """

        self._backdrop_path = backdrop_path

    @property
    def parts(self):
        """Gets the parts of this InlineResponse20079.  # noqa: E501


        :return: The parts of this InlineResponse20079.  # noqa: E501
        :rtype: list[InlineResponse20079Parts]
        """
        return self._parts

    @parts.setter
    def parts(self, parts):
        """Sets the parts of this InlineResponse20079.


        :param parts: The parts of this InlineResponse20079.  # noqa: E501
        :type: list[InlineResponse20079Parts]
        """

        self._parts = parts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20079, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20079):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
