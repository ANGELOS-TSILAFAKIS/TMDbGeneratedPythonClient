# coding: utf-8

"""
    API

    ## Welcome  This is a place to put general notes and extra information, for internal use.  To get started designing/documenting this API, select a version on the left. # Title No Description  # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class InlineResponse20059ReleaseDates(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'certification': 'str',
        'iso_639_1': 'str',
        'release_date': 'str',
        'type': 'int',
        'note': 'str'
    }

    attribute_map = {
        'certification': 'certification',
        'iso_639_1': 'iso_639_1',
        'release_date': 'release_date',
        'type': 'type',
        'note': 'note'
    }

    def __init__(self, certification=None, iso_639_1=None, release_date=None, type=None, note=None):  # noqa: E501
        """InlineResponse20059ReleaseDates - a model defined in Swagger"""  # noqa: E501
        self._certification = None
        self._iso_639_1 = None
        self._release_date = None
        self._type = None
        self._note = None
        self.discriminator = None
        if certification is not None:
            self.certification = certification
        if iso_639_1 is not None:
            self.iso_639_1 = iso_639_1
        if release_date is not None:
            self.release_date = release_date
        if type is not None:
            self.type = type
        if note is not None:
            self.note = note

    @property
    def certification(self):
        """Gets the certification of this InlineResponse20059ReleaseDates.  # noqa: E501


        :return: The certification of this InlineResponse20059ReleaseDates.  # noqa: E501
        :rtype: str
        """
        return self._certification

    @certification.setter
    def certification(self, certification):
        """Sets the certification of this InlineResponse20059ReleaseDates.


        :param certification: The certification of this InlineResponse20059ReleaseDates.  # noqa: E501
        :type: str
        """

        self._certification = certification

    @property
    def iso_639_1(self):
        """Gets the iso_639_1 of this InlineResponse20059ReleaseDates.  # noqa: E501


        :return: The iso_639_1 of this InlineResponse20059ReleaseDates.  # noqa: E501
        :rtype: str
        """
        return self._iso_639_1

    @iso_639_1.setter
    def iso_639_1(self, iso_639_1):
        """Sets the iso_639_1 of this InlineResponse20059ReleaseDates.


        :param iso_639_1: The iso_639_1 of this InlineResponse20059ReleaseDates.  # noqa: E501
        :type: str
        """

        self._iso_639_1 = iso_639_1

    @property
    def release_date(self):
        """Gets the release_date of this InlineResponse20059ReleaseDates.  # noqa: E501


        :return: The release_date of this InlineResponse20059ReleaseDates.  # noqa: E501
        :rtype: str
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """Sets the release_date of this InlineResponse20059ReleaseDates.


        :param release_date: The release_date of this InlineResponse20059ReleaseDates.  # noqa: E501
        :type: str
        """

        self._release_date = release_date

    @property
    def type(self):
        """Gets the type of this InlineResponse20059ReleaseDates.  # noqa: E501


        :return: The type of this InlineResponse20059ReleaseDates.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse20059ReleaseDates.


        :param type: The type of this InlineResponse20059ReleaseDates.  # noqa: E501
        :type: int
        """

        self._type = type

    @property
    def note(self):
        """Gets the note of this InlineResponse20059ReleaseDates.  # noqa: E501


        :return: The note of this InlineResponse20059ReleaseDates.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this InlineResponse20059ReleaseDates.


        :param note: The note of this InlineResponse20059ReleaseDates.  # noqa: E501
        :type: str
        """

        self._note = note

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20059ReleaseDates, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20059ReleaseDates):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
