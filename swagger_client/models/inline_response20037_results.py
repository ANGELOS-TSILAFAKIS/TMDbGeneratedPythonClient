# coding: utf-8

"""
    API

    ## Welcome  This is a place to put general notes and extra information, for internal use.  To get started designing/documenting this API, select a version on the left. # Title No Description  # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class InlineResponse20037Results(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'episode_number': 'int',
        'rated': 'InlineResponse20037Rated'
    }

    attribute_map = {
        'id': 'id',
        'episode_number': 'episode_number',
        'rated': 'rated'
    }

    def __init__(self, id=None, episode_number=None, rated=None):  # noqa: E501
        """InlineResponse20037Results - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._episode_number = None
        self._rated = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if episode_number is not None:
            self.episode_number = episode_number
        if rated is not None:
            self.rated = rated

    @property
    def id(self):
        """Gets the id of this InlineResponse20037Results.  # noqa: E501


        :return: The id of this InlineResponse20037Results.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20037Results.


        :param id: The id of this InlineResponse20037Results.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def episode_number(self):
        """Gets the episode_number of this InlineResponse20037Results.  # noqa: E501


        :return: The episode_number of this InlineResponse20037Results.  # noqa: E501
        :rtype: int
        """
        return self._episode_number

    @episode_number.setter
    def episode_number(self, episode_number):
        """Sets the episode_number of this InlineResponse20037Results.


        :param episode_number: The episode_number of this InlineResponse20037Results.  # noqa: E501
        :type: int
        """

        self._episode_number = episode_number

    @property
    def rated(self):
        """Gets the rated of this InlineResponse20037Results.  # noqa: E501


        :return: The rated of this InlineResponse20037Results.  # noqa: E501
        :rtype: InlineResponse20037Rated
        """
        return self._rated

    @rated.setter
    def rated(self, rated):
        """Sets the rated of this InlineResponse20037Results.


        :param rated: The rated of this InlineResponse20037Results.  # noqa: E501
        :type: InlineResponse20037Rated
        """

        self._rated = rated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20037Results, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20037Results):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
