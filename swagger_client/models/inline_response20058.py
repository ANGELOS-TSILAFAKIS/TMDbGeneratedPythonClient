# coding: utf-8

"""
    API

    ## Welcome  This is a place to put general notes and extra information, for internal use.  To get started designing/documenting this API, select a version on the left. # Title No Description  # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class InlineResponse20058(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'imdb_id': 'str',
        'facebook_id': 'str',
        'freebase_mid': 'str',
        'freebase_id': 'str',
        'tvrage_id': 'int',
        'twitter_id': 'str',
        'id': 'int',
        'instagram_id': 'str'
    }

    attribute_map = {
        'imdb_id': 'imdb_id',
        'facebook_id': 'facebook_id',
        'freebase_mid': 'freebase_mid',
        'freebase_id': 'freebase_id',
        'tvrage_id': 'tvrage_id',
        'twitter_id': 'twitter_id',
        'id': 'id',
        'instagram_id': 'instagram_id'
    }

    def __init__(self, imdb_id=None, facebook_id=None, freebase_mid=None, freebase_id=None, tvrage_id=None, twitter_id=None, id=None, instagram_id=None):  # noqa: E501
        """InlineResponse20058 - a model defined in Swagger"""  # noqa: E501
        self._imdb_id = None
        self._facebook_id = None
        self._freebase_mid = None
        self._freebase_id = None
        self._tvrage_id = None
        self._twitter_id = None
        self._id = None
        self._instagram_id = None
        self.discriminator = None
        if imdb_id is not None:
            self.imdb_id = imdb_id
        if facebook_id is not None:
            self.facebook_id = facebook_id
        if freebase_mid is not None:
            self.freebase_mid = freebase_mid
        if freebase_id is not None:
            self.freebase_id = freebase_id
        if tvrage_id is not None:
            self.tvrage_id = tvrage_id
        if twitter_id is not None:
            self.twitter_id = twitter_id
        self.id = id
        if instagram_id is not None:
            self.instagram_id = instagram_id

    @property
    def imdb_id(self):
        """Gets the imdb_id of this InlineResponse20058.  # noqa: E501


        :return: The imdb_id of this InlineResponse20058.  # noqa: E501
        :rtype: str
        """
        return self._imdb_id

    @imdb_id.setter
    def imdb_id(self, imdb_id):
        """Sets the imdb_id of this InlineResponse20058.


        :param imdb_id: The imdb_id of this InlineResponse20058.  # noqa: E501
        :type: str
        """

        self._imdb_id = imdb_id

    @property
    def facebook_id(self):
        """Gets the facebook_id of this InlineResponse20058.  # noqa: E501


        :return: The facebook_id of this InlineResponse20058.  # noqa: E501
        :rtype: str
        """
        return self._facebook_id

    @facebook_id.setter
    def facebook_id(self, facebook_id):
        """Sets the facebook_id of this InlineResponse20058.


        :param facebook_id: The facebook_id of this InlineResponse20058.  # noqa: E501
        :type: str
        """

        self._facebook_id = facebook_id

    @property
    def freebase_mid(self):
        """Gets the freebase_mid of this InlineResponse20058.  # noqa: E501


        :return: The freebase_mid of this InlineResponse20058.  # noqa: E501
        :rtype: str
        """
        return self._freebase_mid

    @freebase_mid.setter
    def freebase_mid(self, freebase_mid):
        """Sets the freebase_mid of this InlineResponse20058.


        :param freebase_mid: The freebase_mid of this InlineResponse20058.  # noqa: E501
        :type: str
        """

        self._freebase_mid = freebase_mid

    @property
    def freebase_id(self):
        """Gets the freebase_id of this InlineResponse20058.  # noqa: E501


        :return: The freebase_id of this InlineResponse20058.  # noqa: E501
        :rtype: str
        """
        return self._freebase_id

    @freebase_id.setter
    def freebase_id(self, freebase_id):
        """Sets the freebase_id of this InlineResponse20058.


        :param freebase_id: The freebase_id of this InlineResponse20058.  # noqa: E501
        :type: str
        """

        self._freebase_id = freebase_id

    @property
    def tvrage_id(self):
        """Gets the tvrage_id of this InlineResponse20058.  # noqa: E501


        :return: The tvrage_id of this InlineResponse20058.  # noqa: E501
        :rtype: int
        """
        return self._tvrage_id

    @tvrage_id.setter
    def tvrage_id(self, tvrage_id):
        """Sets the tvrage_id of this InlineResponse20058.


        :param tvrage_id: The tvrage_id of this InlineResponse20058.  # noqa: E501
        :type: int
        """

        self._tvrage_id = tvrage_id

    @property
    def twitter_id(self):
        """Gets the twitter_id of this InlineResponse20058.  # noqa: E501


        :return: The twitter_id of this InlineResponse20058.  # noqa: E501
        :rtype: str
        """
        return self._twitter_id

    @twitter_id.setter
    def twitter_id(self, twitter_id):
        """Sets the twitter_id of this InlineResponse20058.


        :param twitter_id: The twitter_id of this InlineResponse20058.  # noqa: E501
        :type: str
        """

        self._twitter_id = twitter_id

    @property
    def id(self):
        """Gets the id of this InlineResponse20058.  # noqa: E501


        :return: The id of this InlineResponse20058.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20058.


        :param id: The id of this InlineResponse20058.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def instagram_id(self):
        """Gets the instagram_id of this InlineResponse20058.  # noqa: E501


        :return: The instagram_id of this InlineResponse20058.  # noqa: E501
        :rtype: str
        """
        return self._instagram_id

    @instagram_id.setter
    def instagram_id(self, instagram_id):
        """Sets the instagram_id of this InlineResponse20058.


        :param instagram_id: The instagram_id of this InlineResponse20058.  # noqa: E501
        :type: str
        """

        self._instagram_id = instagram_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20058, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20058):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
