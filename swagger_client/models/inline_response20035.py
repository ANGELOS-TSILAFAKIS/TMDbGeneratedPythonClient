# coding: utf-8

"""
    API

    ## Welcome  This is a place to put general notes and extra information, for internal use.  To get started designing/documenting this API, select a version on the left. # Title No Description  # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class InlineResponse20035(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'adult': 'bool',
        'also_known_as': 'list[object]',
        'biography': 'str',
        'birthday': 'str',
        'deathday': 'str',
        'gender': 'int',
        'homepage': 'str',
        'id': 'int',
        'imdb_id': 'str',
        'name': 'str',
        'place_of_birth': 'str',
        'popularity': 'float',
        'profile_path': 'ImagePath'
    }

    attribute_map = {
        'adult': 'adult',
        'also_known_as': 'also_known_as',
        'biography': 'biography',
        'birthday': 'birthday',
        'deathday': 'deathday',
        'gender': 'gender',
        'homepage': 'homepage',
        'id': 'id',
        'imdb_id': 'imdb_id',
        'name': 'name',
        'place_of_birth': 'place_of_birth',
        'popularity': 'popularity',
        'profile_path': 'profile_path'
    }

    def __init__(self, adult=None, also_known_as=None, biography=None, birthday=None, deathday=None, gender=None, homepage=None, id=None, imdb_id=None, name=None, place_of_birth=None, popularity=None, profile_path=None):  # noqa: E501
        """InlineResponse20035 - a model defined in Swagger"""  # noqa: E501
        self._adult = None
        self._also_known_as = None
        self._biography = None
        self._birthday = None
        self._deathday = None
        self._gender = None
        self._homepage = None
        self._id = None
        self._imdb_id = None
        self._name = None
        self._place_of_birth = None
        self._popularity = None
        self._profile_path = None
        self.discriminator = None
        if adult is not None:
            self.adult = adult
        if also_known_as is not None:
            self.also_known_as = also_known_as
        if biography is not None:
            self.biography = biography
        if birthday is not None:
            self.birthday = birthday
        if deathday is not None:
            self.deathday = deathday
        if gender is not None:
            self.gender = gender
        if homepage is not None:
            self.homepage = homepage
        if id is not None:
            self.id = id
        if imdb_id is not None:
            self.imdb_id = imdb_id
        if name is not None:
            self.name = name
        if place_of_birth is not None:
            self.place_of_birth = place_of_birth
        if popularity is not None:
            self.popularity = popularity
        if profile_path is not None:
            self.profile_path = profile_path

    @property
    def adult(self):
        """Gets the adult of this InlineResponse20035.  # noqa: E501


        :return: The adult of this InlineResponse20035.  # noqa: E501
        :rtype: bool
        """
        return self._adult

    @adult.setter
    def adult(self, adult):
        """Sets the adult of this InlineResponse20035.


        :param adult: The adult of this InlineResponse20035.  # noqa: E501
        :type: bool
        """

        self._adult = adult

    @property
    def also_known_as(self):
        """Gets the also_known_as of this InlineResponse20035.  # noqa: E501


        :return: The also_known_as of this InlineResponse20035.  # noqa: E501
        :rtype: list[object]
        """
        return self._also_known_as

    @also_known_as.setter
    def also_known_as(self, also_known_as):
        """Sets the also_known_as of this InlineResponse20035.


        :param also_known_as: The also_known_as of this InlineResponse20035.  # noqa: E501
        :type: list[object]
        """

        self._also_known_as = also_known_as

    @property
    def biography(self):
        """Gets the biography of this InlineResponse20035.  # noqa: E501


        :return: The biography of this InlineResponse20035.  # noqa: E501
        :rtype: str
        """
        return self._biography

    @biography.setter
    def biography(self, biography):
        """Sets the biography of this InlineResponse20035.


        :param biography: The biography of this InlineResponse20035.  # noqa: E501
        :type: str
        """

        self._biography = biography

    @property
    def birthday(self):
        """Gets the birthday of this InlineResponse20035.  # noqa: E501


        :return: The birthday of this InlineResponse20035.  # noqa: E501
        :rtype: str
        """
        return self._birthday

    @birthday.setter
    def birthday(self, birthday):
        """Sets the birthday of this InlineResponse20035.


        :param birthday: The birthday of this InlineResponse20035.  # noqa: E501
        :type: str
        """

        self._birthday = birthday

    @property
    def deathday(self):
        """Gets the deathday of this InlineResponse20035.  # noqa: E501


        :return: The deathday of this InlineResponse20035.  # noqa: E501
        :rtype: str
        """
        return self._deathday

    @deathday.setter
    def deathday(self, deathday):
        """Sets the deathday of this InlineResponse20035.


        :param deathday: The deathday of this InlineResponse20035.  # noqa: E501
        :type: str
        """

        self._deathday = deathday

    @property
    def gender(self):
        """Gets the gender of this InlineResponse20035.  # noqa: E501


        :return: The gender of this InlineResponse20035.  # noqa: E501
        :rtype: int
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this InlineResponse20035.


        :param gender: The gender of this InlineResponse20035.  # noqa: E501
        :type: int
        """

        self._gender = gender

    @property
    def homepage(self):
        """Gets the homepage of this InlineResponse20035.  # noqa: E501


        :return: The homepage of this InlineResponse20035.  # noqa: E501
        :rtype: str
        """
        return self._homepage

    @homepage.setter
    def homepage(self, homepage):
        """Sets the homepage of this InlineResponse20035.


        :param homepage: The homepage of this InlineResponse20035.  # noqa: E501
        :type: str
        """

        self._homepage = homepage

    @property
    def id(self):
        """Gets the id of this InlineResponse20035.  # noqa: E501


        :return: The id of this InlineResponse20035.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20035.


        :param id: The id of this InlineResponse20035.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def imdb_id(self):
        """Gets the imdb_id of this InlineResponse20035.  # noqa: E501


        :return: The imdb_id of this InlineResponse20035.  # noqa: E501
        :rtype: str
        """
        return self._imdb_id

    @imdb_id.setter
    def imdb_id(self, imdb_id):
        """Sets the imdb_id of this InlineResponse20035.


        :param imdb_id: The imdb_id of this InlineResponse20035.  # noqa: E501
        :type: str
        """

        self._imdb_id = imdb_id

    @property
    def name(self):
        """Gets the name of this InlineResponse20035.  # noqa: E501


        :return: The name of this InlineResponse20035.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse20035.


        :param name: The name of this InlineResponse20035.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def place_of_birth(self):
        """Gets the place_of_birth of this InlineResponse20035.  # noqa: E501


        :return: The place_of_birth of this InlineResponse20035.  # noqa: E501
        :rtype: str
        """
        return self._place_of_birth

    @place_of_birth.setter
    def place_of_birth(self, place_of_birth):
        """Sets the place_of_birth of this InlineResponse20035.


        :param place_of_birth: The place_of_birth of this InlineResponse20035.  # noqa: E501
        :type: str
        """

        self._place_of_birth = place_of_birth

    @property
    def popularity(self):
        """Gets the popularity of this InlineResponse20035.  # noqa: E501


        :return: The popularity of this InlineResponse20035.  # noqa: E501
        :rtype: float
        """
        return self._popularity

    @popularity.setter
    def popularity(self, popularity):
        """Sets the popularity of this InlineResponse20035.


        :param popularity: The popularity of this InlineResponse20035.  # noqa: E501
        :type: float
        """

        self._popularity = popularity

    @property
    def profile_path(self):
        """Gets the profile_path of this InlineResponse20035.  # noqa: E501


        :return: The profile_path of this InlineResponse20035.  # noqa: E501
        :rtype: ImagePath
        """
        return self._profile_path

    @profile_path.setter
    def profile_path(self, profile_path):
        """Sets the profile_path of this InlineResponse20035.


        :param profile_path: The profile_path of this InlineResponse20035.  # noqa: E501
        :type: ImagePath
        """

        self._profile_path = profile_path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20035, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20035):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
