# coding: utf-8

"""
    API

    ## Welcome  This is a place to put general notes and extra information, for internal use.  To get started designing/documenting this API, select a version on the left. # Title No Description  # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class InlineResponse2002Items(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'action': 'str',
        'time': 'str',
        'iso_639_1': 'str',
        'value': 'str',
        'original_value': 'str'
    }

    attribute_map = {
        'id': 'id',
        'action': 'action',
        'time': 'time',
        'iso_639_1': 'iso_639_1',
        'value': 'value',
        'original_value': 'original_value'
    }

    def __init__(self, id=None, action=None, time=None, iso_639_1=None, value=None, original_value=None):  # noqa: E501
        """InlineResponse2002Items - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._action = None
        self._time = None
        self._iso_639_1 = None
        self._value = None
        self._original_value = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if action is not None:
            self.action = action
        if time is not None:
            self.time = time
        if iso_639_1 is not None:
            self.iso_639_1 = iso_639_1
        if value is not None:
            self.value = value
        if original_value is not None:
            self.original_value = original_value

    @property
    def id(self):
        """Gets the id of this InlineResponse2002Items.  # noqa: E501


        :return: The id of this InlineResponse2002Items.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse2002Items.


        :param id: The id of this InlineResponse2002Items.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def action(self):
        """Gets the action of this InlineResponse2002Items.  # noqa: E501


        :return: The action of this InlineResponse2002Items.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this InlineResponse2002Items.


        :param action: The action of this InlineResponse2002Items.  # noqa: E501
        :type: str
        """

        self._action = action

    @property
    def time(self):
        """Gets the time of this InlineResponse2002Items.  # noqa: E501


        :return: The time of this InlineResponse2002Items.  # noqa: E501
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this InlineResponse2002Items.


        :param time: The time of this InlineResponse2002Items.  # noqa: E501
        :type: str
        """

        self._time = time

    @property
    def iso_639_1(self):
        """Gets the iso_639_1 of this InlineResponse2002Items.  # noqa: E501


        :return: The iso_639_1 of this InlineResponse2002Items.  # noqa: E501
        :rtype: str
        """
        return self._iso_639_1

    @iso_639_1.setter
    def iso_639_1(self, iso_639_1):
        """Sets the iso_639_1 of this InlineResponse2002Items.


        :param iso_639_1: The iso_639_1 of this InlineResponse2002Items.  # noqa: E501
        :type: str
        """

        self._iso_639_1 = iso_639_1

    @property
    def value(self):
        """Gets the value of this InlineResponse2002Items.  # noqa: E501


        :return: The value of this InlineResponse2002Items.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this InlineResponse2002Items.


        :param value: The value of this InlineResponse2002Items.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def original_value(self):
        """Gets the original_value of this InlineResponse2002Items.  # noqa: E501


        :return: The original_value of this InlineResponse2002Items.  # noqa: E501
        :rtype: str
        """
        return self._original_value

    @original_value.setter
    def original_value(self, original_value):
        """Sets the original_value of this InlineResponse2002Items.


        :param original_value: The original_value of this InlineResponse2002Items.  # noqa: E501
        :type: str
        """

        self._original_value = original_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2002Items, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2002Items):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
