# coding: utf-8

"""
    API

    ## Welcome  This is a place to put general notes and extra information, for internal use.  To get started designing/documenting this API, select a version on the left. # Title No Description  # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class InlineResponse20092Images(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'base_url': 'str',
        'secure_base_url': 'str',
        'backdrop_sizes': 'list[str]',
        'logo_sizes': 'list[str]',
        'poster_sizes': 'list[str]',
        'profile_sizes': 'list[str]',
        'still_sizes': 'list[str]'
    }

    attribute_map = {
        'base_url': 'base_url',
        'secure_base_url': 'secure_base_url',
        'backdrop_sizes': 'backdrop_sizes',
        'logo_sizes': 'logo_sizes',
        'poster_sizes': 'poster_sizes',
        'profile_sizes': 'profile_sizes',
        'still_sizes': 'still_sizes'
    }

    def __init__(self, base_url=None, secure_base_url=None, backdrop_sizes=None, logo_sizes=None, poster_sizes=None, profile_sizes=None, still_sizes=None):  # noqa: E501
        """InlineResponse20092Images - a model defined in Swagger"""  # noqa: E501
        self._base_url = None
        self._secure_base_url = None
        self._backdrop_sizes = None
        self._logo_sizes = None
        self._poster_sizes = None
        self._profile_sizes = None
        self._still_sizes = None
        self.discriminator = None
        if base_url is not None:
            self.base_url = base_url
        if secure_base_url is not None:
            self.secure_base_url = secure_base_url
        if backdrop_sizes is not None:
            self.backdrop_sizes = backdrop_sizes
        if logo_sizes is not None:
            self.logo_sizes = logo_sizes
        if poster_sizes is not None:
            self.poster_sizes = poster_sizes
        if profile_sizes is not None:
            self.profile_sizes = profile_sizes
        if still_sizes is not None:
            self.still_sizes = still_sizes

    @property
    def base_url(self):
        """Gets the base_url of this InlineResponse20092Images.  # noqa: E501


        :return: The base_url of this InlineResponse20092Images.  # noqa: E501
        :rtype: str
        """
        return self._base_url

    @base_url.setter
    def base_url(self, base_url):
        """Sets the base_url of this InlineResponse20092Images.


        :param base_url: The base_url of this InlineResponse20092Images.  # noqa: E501
        :type: str
        """

        self._base_url = base_url

    @property
    def secure_base_url(self):
        """Gets the secure_base_url of this InlineResponse20092Images.  # noqa: E501


        :return: The secure_base_url of this InlineResponse20092Images.  # noqa: E501
        :rtype: str
        """
        return self._secure_base_url

    @secure_base_url.setter
    def secure_base_url(self, secure_base_url):
        """Sets the secure_base_url of this InlineResponse20092Images.


        :param secure_base_url: The secure_base_url of this InlineResponse20092Images.  # noqa: E501
        :type: str
        """

        self._secure_base_url = secure_base_url

    @property
    def backdrop_sizes(self):
        """Gets the backdrop_sizes of this InlineResponse20092Images.  # noqa: E501


        :return: The backdrop_sizes of this InlineResponse20092Images.  # noqa: E501
        :rtype: list[str]
        """
        return self._backdrop_sizes

    @backdrop_sizes.setter
    def backdrop_sizes(self, backdrop_sizes):
        """Sets the backdrop_sizes of this InlineResponse20092Images.


        :param backdrop_sizes: The backdrop_sizes of this InlineResponse20092Images.  # noqa: E501
        :type: list[str]
        """

        self._backdrop_sizes = backdrop_sizes

    @property
    def logo_sizes(self):
        """Gets the logo_sizes of this InlineResponse20092Images.  # noqa: E501


        :return: The logo_sizes of this InlineResponse20092Images.  # noqa: E501
        :rtype: list[str]
        """
        return self._logo_sizes

    @logo_sizes.setter
    def logo_sizes(self, logo_sizes):
        """Sets the logo_sizes of this InlineResponse20092Images.


        :param logo_sizes: The logo_sizes of this InlineResponse20092Images.  # noqa: E501
        :type: list[str]
        """

        self._logo_sizes = logo_sizes

    @property
    def poster_sizes(self):
        """Gets the poster_sizes of this InlineResponse20092Images.  # noqa: E501


        :return: The poster_sizes of this InlineResponse20092Images.  # noqa: E501
        :rtype: list[str]
        """
        return self._poster_sizes

    @poster_sizes.setter
    def poster_sizes(self, poster_sizes):
        """Sets the poster_sizes of this InlineResponse20092Images.


        :param poster_sizes: The poster_sizes of this InlineResponse20092Images.  # noqa: E501
        :type: list[str]
        """

        self._poster_sizes = poster_sizes

    @property
    def profile_sizes(self):
        """Gets the profile_sizes of this InlineResponse20092Images.  # noqa: E501


        :return: The profile_sizes of this InlineResponse20092Images.  # noqa: E501
        :rtype: list[str]
        """
        return self._profile_sizes

    @profile_sizes.setter
    def profile_sizes(self, profile_sizes):
        """Sets the profile_sizes of this InlineResponse20092Images.


        :param profile_sizes: The profile_sizes of this InlineResponse20092Images.  # noqa: E501
        :type: list[str]
        """

        self._profile_sizes = profile_sizes

    @property
    def still_sizes(self):
        """Gets the still_sizes of this InlineResponse20092Images.  # noqa: E501


        :return: The still_sizes of this InlineResponse20092Images.  # noqa: E501
        :rtype: list[str]
        """
        return self._still_sizes

    @still_sizes.setter
    def still_sizes(self, still_sizes):
        """Sets the still_sizes of this InlineResponse20092Images.


        :param still_sizes: The still_sizes of this InlineResponse20092Images.  # noqa: E501
        :type: list[str]
        """

        self._still_sizes = still_sizes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20092Images, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20092Images):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
