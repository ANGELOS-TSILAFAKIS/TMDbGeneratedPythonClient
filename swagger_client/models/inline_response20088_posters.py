# coding: utf-8

"""
    API

    ## Welcome  This is a place to put general notes and extra information, for internal use.  To get started designing/documenting this API, select a version on the left. # Title No Description  # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class InlineResponse20088Posters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aspect_ratio': 'float',
        'file_path': 'str',
        'height': 'int',
        'iso_639_1': 'str',
        'vote_average': 'float',
        'vote_count': 'int',
        'width': 'int'
    }

    attribute_map = {
        'aspect_ratio': 'aspect_ratio',
        'file_path': 'file_path',
        'height': 'height',
        'iso_639_1': 'iso_639_1',
        'vote_average': 'vote_average',
        'vote_count': 'vote_count',
        'width': 'width'
    }

    def __init__(self, aspect_ratio=None, file_path=None, height=None, iso_639_1=None, vote_average=None, vote_count=None, width=None):  # noqa: E501
        """InlineResponse20088Posters - a model defined in Swagger"""  # noqa: E501
        self._aspect_ratio = None
        self._file_path = None
        self._height = None
        self._iso_639_1 = None
        self._vote_average = None
        self._vote_count = None
        self._width = None
        self.discriminator = None
        if aspect_ratio is not None:
            self.aspect_ratio = aspect_ratio
        if file_path is not None:
            self.file_path = file_path
        if height is not None:
            self.height = height
        if iso_639_1 is not None:
            self.iso_639_1 = iso_639_1
        if vote_average is not None:
            self.vote_average = vote_average
        if vote_count is not None:
            self.vote_count = vote_count
        if width is not None:
            self.width = width

    @property
    def aspect_ratio(self):
        """Gets the aspect_ratio of this InlineResponse20088Posters.  # noqa: E501


        :return: The aspect_ratio of this InlineResponse20088Posters.  # noqa: E501
        :rtype: float
        """
        return self._aspect_ratio

    @aspect_ratio.setter
    def aspect_ratio(self, aspect_ratio):
        """Sets the aspect_ratio of this InlineResponse20088Posters.


        :param aspect_ratio: The aspect_ratio of this InlineResponse20088Posters.  # noqa: E501
        :type: float
        """

        self._aspect_ratio = aspect_ratio

    @property
    def file_path(self):
        """Gets the file_path of this InlineResponse20088Posters.  # noqa: E501


        :return: The file_path of this InlineResponse20088Posters.  # noqa: E501
        :rtype: str
        """
        return self._file_path

    @file_path.setter
    def file_path(self, file_path):
        """Sets the file_path of this InlineResponse20088Posters.


        :param file_path: The file_path of this InlineResponse20088Posters.  # noqa: E501
        :type: str
        """

        self._file_path = file_path

    @property
    def height(self):
        """Gets the height of this InlineResponse20088Posters.  # noqa: E501


        :return: The height of this InlineResponse20088Posters.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this InlineResponse20088Posters.


        :param height: The height of this InlineResponse20088Posters.  # noqa: E501
        :type: int
        """

        self._height = height

    @property
    def iso_639_1(self):
        """Gets the iso_639_1 of this InlineResponse20088Posters.  # noqa: E501


        :return: The iso_639_1 of this InlineResponse20088Posters.  # noqa: E501
        :rtype: str
        """
        return self._iso_639_1

    @iso_639_1.setter
    def iso_639_1(self, iso_639_1):
        """Sets the iso_639_1 of this InlineResponse20088Posters.


        :param iso_639_1: The iso_639_1 of this InlineResponse20088Posters.  # noqa: E501
        :type: str
        """

        self._iso_639_1 = iso_639_1

    @property
    def vote_average(self):
        """Gets the vote_average of this InlineResponse20088Posters.  # noqa: E501


        :return: The vote_average of this InlineResponse20088Posters.  # noqa: E501
        :rtype: float
        """
        return self._vote_average

    @vote_average.setter
    def vote_average(self, vote_average):
        """Sets the vote_average of this InlineResponse20088Posters.


        :param vote_average: The vote_average of this InlineResponse20088Posters.  # noqa: E501
        :type: float
        """

        self._vote_average = vote_average

    @property
    def vote_count(self):
        """Gets the vote_count of this InlineResponse20088Posters.  # noqa: E501


        :return: The vote_count of this InlineResponse20088Posters.  # noqa: E501
        :rtype: int
        """
        return self._vote_count

    @vote_count.setter
    def vote_count(self, vote_count):
        """Sets the vote_count of this InlineResponse20088Posters.


        :param vote_count: The vote_count of this InlineResponse20088Posters.  # noqa: E501
        :type: int
        """

        self._vote_count = vote_count

    @property
    def width(self):
        """Gets the width of this InlineResponse20088Posters.  # noqa: E501


        :return: The width of this InlineResponse20088Posters.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this InlineResponse20088Posters.


        :param width: The width of this InlineResponse20088Posters.  # noqa: E501
        :type: int
        """

        self._width = width

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20088Posters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20088Posters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
