# coding: utf-8

"""
    API

    ## Welcome  This is a place to put general notes and extra information, for internal use.  To get started designing/documenting this API, select a version on the left. # Title No Description  # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class InlineResponse20061Results(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'favorite_count': 'int',
        'id': 'int',
        'item_count': 'int',
        'iso_639_1': 'str',
        'list_type': 'str',
        'name': 'str',
        'poster_path': 'str'
    }

    attribute_map = {
        'description': 'description',
        'favorite_count': 'favorite_count',
        'id': 'id',
        'item_count': 'item_count',
        'iso_639_1': 'iso_639_1',
        'list_type': 'list_type',
        'name': 'name',
        'poster_path': 'poster_path'
    }

    def __init__(self, description=None, favorite_count=None, id=None, item_count=None, iso_639_1=None, list_type=None, name=None, poster_path=None):  # noqa: E501
        """InlineResponse20061Results - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._favorite_count = None
        self._id = None
        self._item_count = None
        self._iso_639_1 = None
        self._list_type = None
        self._name = None
        self._poster_path = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if favorite_count is not None:
            self.favorite_count = favorite_count
        if id is not None:
            self.id = id
        if item_count is not None:
            self.item_count = item_count
        if iso_639_1 is not None:
            self.iso_639_1 = iso_639_1
        if list_type is not None:
            self.list_type = list_type
        if name is not None:
            self.name = name
        if poster_path is not None:
            self.poster_path = poster_path

    @property
    def description(self):
        """Gets the description of this InlineResponse20061Results.  # noqa: E501


        :return: The description of this InlineResponse20061Results.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InlineResponse20061Results.


        :param description: The description of this InlineResponse20061Results.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def favorite_count(self):
        """Gets the favorite_count of this InlineResponse20061Results.  # noqa: E501


        :return: The favorite_count of this InlineResponse20061Results.  # noqa: E501
        :rtype: int
        """
        return self._favorite_count

    @favorite_count.setter
    def favorite_count(self, favorite_count):
        """Sets the favorite_count of this InlineResponse20061Results.


        :param favorite_count: The favorite_count of this InlineResponse20061Results.  # noqa: E501
        :type: int
        """

        self._favorite_count = favorite_count

    @property
    def id(self):
        """Gets the id of this InlineResponse20061Results.  # noqa: E501


        :return: The id of this InlineResponse20061Results.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20061Results.


        :param id: The id of this InlineResponse20061Results.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def item_count(self):
        """Gets the item_count of this InlineResponse20061Results.  # noqa: E501


        :return: The item_count of this InlineResponse20061Results.  # noqa: E501
        :rtype: int
        """
        return self._item_count

    @item_count.setter
    def item_count(self, item_count):
        """Sets the item_count of this InlineResponse20061Results.


        :param item_count: The item_count of this InlineResponse20061Results.  # noqa: E501
        :type: int
        """

        self._item_count = item_count

    @property
    def iso_639_1(self):
        """Gets the iso_639_1 of this InlineResponse20061Results.  # noqa: E501


        :return: The iso_639_1 of this InlineResponse20061Results.  # noqa: E501
        :rtype: str
        """
        return self._iso_639_1

    @iso_639_1.setter
    def iso_639_1(self, iso_639_1):
        """Sets the iso_639_1 of this InlineResponse20061Results.


        :param iso_639_1: The iso_639_1 of this InlineResponse20061Results.  # noqa: E501
        :type: str
        """

        self._iso_639_1 = iso_639_1

    @property
    def list_type(self):
        """Gets the list_type of this InlineResponse20061Results.  # noqa: E501


        :return: The list_type of this InlineResponse20061Results.  # noqa: E501
        :rtype: str
        """
        return self._list_type

    @list_type.setter
    def list_type(self, list_type):
        """Sets the list_type of this InlineResponse20061Results.


        :param list_type: The list_type of this InlineResponse20061Results.  # noqa: E501
        :type: str
        """

        self._list_type = list_type

    @property
    def name(self):
        """Gets the name of this InlineResponse20061Results.  # noqa: E501


        :return: The name of this InlineResponse20061Results.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse20061Results.


        :param name: The name of this InlineResponse20061Results.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def poster_path(self):
        """Gets the poster_path of this InlineResponse20061Results.  # noqa: E501


        :return: The poster_path of this InlineResponse20061Results.  # noqa: E501
        :rtype: str
        """
        return self._poster_path

    @poster_path.setter
    def poster_path(self, poster_path):
        """Sets the poster_path of this InlineResponse20061Results.


        :param poster_path: The poster_path of this InlineResponse20061Results.  # noqa: E501
        :type: str
        """

        self._poster_path = poster_path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20061Results, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20061Results):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
