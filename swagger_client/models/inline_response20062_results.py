# coding: utf-8

"""
    API

    ## Welcome  This is a place to put general notes and extra information, for internal use.  To get started designing/documenting this API, select a version on the left. # Title No Description  # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class InlineResponse20062Results(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'profile_path': 'ImagePath',
        'adult': 'bool',
        'id': 'int',
        'known_for': 'list[Object]',
        'name': 'str',
        'popularity': 'float'
    }

    attribute_map = {
        'profile_path': 'profile_path',
        'adult': 'adult',
        'id': 'id',
        'known_for': 'known_for',
        'name': 'name',
        'popularity': 'popularity'
    }

    def __init__(self, profile_path=None, adult=None, id=None, known_for=None, name=None, popularity=None):  # noqa: E501
        """InlineResponse20062Results - a model defined in Swagger"""  # noqa: E501
        self._profile_path = None
        self._adult = None
        self._id = None
        self._known_for = None
        self._name = None
        self._popularity = None
        self.discriminator = None
        if profile_path is not None:
            self.profile_path = profile_path
        if adult is not None:
            self.adult = adult
        if id is not None:
            self.id = id
        if known_for is not None:
            self.known_for = known_for
        if name is not None:
            self.name = name
        if popularity is not None:
            self.popularity = popularity

    @property
    def profile_path(self):
        """Gets the profile_path of this InlineResponse20062Results.  # noqa: E501


        :return: The profile_path of this InlineResponse20062Results.  # noqa: E501
        :rtype: ImagePath
        """
        return self._profile_path

    @profile_path.setter
    def profile_path(self, profile_path):
        """Sets the profile_path of this InlineResponse20062Results.


        :param profile_path: The profile_path of this InlineResponse20062Results.  # noqa: E501
        :type: ImagePath
        """

        self._profile_path = profile_path

    @property
    def adult(self):
        """Gets the adult of this InlineResponse20062Results.  # noqa: E501


        :return: The adult of this InlineResponse20062Results.  # noqa: E501
        :rtype: bool
        """
        return self._adult

    @adult.setter
    def adult(self, adult):
        """Sets the adult of this InlineResponse20062Results.


        :param adult: The adult of this InlineResponse20062Results.  # noqa: E501
        :type: bool
        """

        self._adult = adult

    @property
    def id(self):
        """Gets the id of this InlineResponse20062Results.  # noqa: E501


        :return: The id of this InlineResponse20062Results.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20062Results.


        :param id: The id of this InlineResponse20062Results.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def known_for(self):
        """Gets the known_for of this InlineResponse20062Results.  # noqa: E501


        :return: The known_for of this InlineResponse20062Results.  # noqa: E501
        :rtype: list[Object]
        """
        return self._known_for

    @known_for.setter
    def known_for(self, known_for):
        """Sets the known_for of this InlineResponse20062Results.


        :param known_for: The known_for of this InlineResponse20062Results.  # noqa: E501
        :type: list[Object]
        """

        self._known_for = known_for

    @property
    def name(self):
        """Gets the name of this InlineResponse20062Results.  # noqa: E501


        :return: The name of this InlineResponse20062Results.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse20062Results.


        :param name: The name of this InlineResponse20062Results.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def popularity(self):
        """Gets the popularity of this InlineResponse20062Results.  # noqa: E501


        :return: The popularity of this InlineResponse20062Results.  # noqa: E501
        :rtype: float
        """
        return self._popularity

    @popularity.setter
    def popularity(self, popularity):
        """Sets the popularity of this InlineResponse20062Results.


        :param popularity: The popularity of this InlineResponse20062Results.  # noqa: E501
        :type: float
        """

        self._popularity = popularity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20062Results, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20062Results):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
