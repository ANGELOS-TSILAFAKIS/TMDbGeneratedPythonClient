# coding: utf-8

"""
    API

    ## Welcome  This is a place to put general notes and extra information, for internal use.  To get started designing/documenting this API, select a version on the left. # Title No Description  # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class InlineResponse20084Cast(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'original_language': 'str',
        'episode_count': 'int',
        'overview': 'str',
        'origin_country': 'list[str]',
        'original_name': 'str',
        'genre_ids': 'list[int]',
        'name': 'str',
        'media_type': 'str',
        'poster_path': 'ImagePath',
        'first_air_date': 'str',
        'vote_average': 'Object',
        'vote_count': 'int',
        'character': 'str',
        'backdrop_path': 'ImagePath',
        'popularity': 'float',
        'credit_id': 'str',
        'original_title': 'str',
        'video': 'bool',
        'release_date': 'str',
        'title': 'str',
        'adult': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'original_language': 'original_language',
        'episode_count': 'episode_count',
        'overview': 'overview',
        'origin_country': 'origin_country',
        'original_name': 'original_name',
        'genre_ids': 'genre_ids',
        'name': 'name',
        'media_type': 'media_type',
        'poster_path': 'poster_path',
        'first_air_date': 'first_air_date',
        'vote_average': 'vote_average',
        'vote_count': 'vote_count',
        'character': 'character',
        'backdrop_path': 'backdrop_path',
        'popularity': 'popularity',
        'credit_id': 'credit_id',
        'original_title': 'original_title',
        'video': 'video',
        'release_date': 'release_date',
        'title': 'title',
        'adult': 'adult'
    }

    def __init__(self, id=None, original_language=None, episode_count=None, overview=None, origin_country=None, original_name=None, genre_ids=None, name=None, media_type=None, poster_path=None, first_air_date=None, vote_average=None, vote_count=None, character=None, backdrop_path=None, popularity=None, credit_id=None, original_title=None, video=None, release_date=None, title=None, adult=None):  # noqa: E501
        """InlineResponse20084Cast - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._original_language = None
        self._episode_count = None
        self._overview = None
        self._origin_country = None
        self._original_name = None
        self._genre_ids = None
        self._name = None
        self._media_type = None
        self._poster_path = None
        self._first_air_date = None
        self._vote_average = None
        self._vote_count = None
        self._character = None
        self._backdrop_path = None
        self._popularity = None
        self._credit_id = None
        self._original_title = None
        self._video = None
        self._release_date = None
        self._title = None
        self._adult = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if original_language is not None:
            self.original_language = original_language
        if episode_count is not None:
            self.episode_count = episode_count
        if overview is not None:
            self.overview = overview
        if origin_country is not None:
            self.origin_country = origin_country
        if original_name is not None:
            self.original_name = original_name
        if genre_ids is not None:
            self.genre_ids = genre_ids
        if name is not None:
            self.name = name
        if media_type is not None:
            self.media_type = media_type
        if poster_path is not None:
            self.poster_path = poster_path
        if first_air_date is not None:
            self.first_air_date = first_air_date
        if vote_average is not None:
            self.vote_average = vote_average
        if vote_count is not None:
            self.vote_count = vote_count
        if character is not None:
            self.character = character
        if backdrop_path is not None:
            self.backdrop_path = backdrop_path
        if popularity is not None:
            self.popularity = popularity
        if credit_id is not None:
            self.credit_id = credit_id
        if original_title is not None:
            self.original_title = original_title
        if video is not None:
            self.video = video
        if release_date is not None:
            self.release_date = release_date
        if title is not None:
            self.title = title
        if adult is not None:
            self.adult = adult

    @property
    def id(self):
        """Gets the id of this InlineResponse20084Cast.  # noqa: E501


        :return: The id of this InlineResponse20084Cast.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20084Cast.


        :param id: The id of this InlineResponse20084Cast.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def original_language(self):
        """Gets the original_language of this InlineResponse20084Cast.  # noqa: E501


        :return: The original_language of this InlineResponse20084Cast.  # noqa: E501
        :rtype: str
        """
        return self._original_language

    @original_language.setter
    def original_language(self, original_language):
        """Sets the original_language of this InlineResponse20084Cast.


        :param original_language: The original_language of this InlineResponse20084Cast.  # noqa: E501
        :type: str
        """

        self._original_language = original_language

    @property
    def episode_count(self):
        """Gets the episode_count of this InlineResponse20084Cast.  # noqa: E501


        :return: The episode_count of this InlineResponse20084Cast.  # noqa: E501
        :rtype: int
        """
        return self._episode_count

    @episode_count.setter
    def episode_count(self, episode_count):
        """Sets the episode_count of this InlineResponse20084Cast.


        :param episode_count: The episode_count of this InlineResponse20084Cast.  # noqa: E501
        :type: int
        """

        self._episode_count = episode_count

    @property
    def overview(self):
        """Gets the overview of this InlineResponse20084Cast.  # noqa: E501


        :return: The overview of this InlineResponse20084Cast.  # noqa: E501
        :rtype: str
        """
        return self._overview

    @overview.setter
    def overview(self, overview):
        """Sets the overview of this InlineResponse20084Cast.


        :param overview: The overview of this InlineResponse20084Cast.  # noqa: E501
        :type: str
        """

        self._overview = overview

    @property
    def origin_country(self):
        """Gets the origin_country of this InlineResponse20084Cast.  # noqa: E501


        :return: The origin_country of this InlineResponse20084Cast.  # noqa: E501
        :rtype: list[str]
        """
        return self._origin_country

    @origin_country.setter
    def origin_country(self, origin_country):
        """Sets the origin_country of this InlineResponse20084Cast.


        :param origin_country: The origin_country of this InlineResponse20084Cast.  # noqa: E501
        :type: list[str]
        """

        self._origin_country = origin_country

    @property
    def original_name(self):
        """Gets the original_name of this InlineResponse20084Cast.  # noqa: E501


        :return: The original_name of this InlineResponse20084Cast.  # noqa: E501
        :rtype: str
        """
        return self._original_name

    @original_name.setter
    def original_name(self, original_name):
        """Sets the original_name of this InlineResponse20084Cast.


        :param original_name: The original_name of this InlineResponse20084Cast.  # noqa: E501
        :type: str
        """

        self._original_name = original_name

    @property
    def genre_ids(self):
        """Gets the genre_ids of this InlineResponse20084Cast.  # noqa: E501


        :return: The genre_ids of this InlineResponse20084Cast.  # noqa: E501
        :rtype: list[int]
        """
        return self._genre_ids

    @genre_ids.setter
    def genre_ids(self, genre_ids):
        """Sets the genre_ids of this InlineResponse20084Cast.


        :param genre_ids: The genre_ids of this InlineResponse20084Cast.  # noqa: E501
        :type: list[int]
        """

        self._genre_ids = genre_ids

    @property
    def name(self):
        """Gets the name of this InlineResponse20084Cast.  # noqa: E501


        :return: The name of this InlineResponse20084Cast.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse20084Cast.


        :param name: The name of this InlineResponse20084Cast.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def media_type(self):
        """Gets the media_type of this InlineResponse20084Cast.  # noqa: E501


        :return: The media_type of this InlineResponse20084Cast.  # noqa: E501
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """Sets the media_type of this InlineResponse20084Cast.


        :param media_type: The media_type of this InlineResponse20084Cast.  # noqa: E501
        :type: str
        """

        self._media_type = media_type

    @property
    def poster_path(self):
        """Gets the poster_path of this InlineResponse20084Cast.  # noqa: E501


        :return: The poster_path of this InlineResponse20084Cast.  # noqa: E501
        :rtype: ImagePath
        """
        return self._poster_path

    @poster_path.setter
    def poster_path(self, poster_path):
        """Sets the poster_path of this InlineResponse20084Cast.


        :param poster_path: The poster_path of this InlineResponse20084Cast.  # noqa: E501
        :type: ImagePath
        """

        self._poster_path = poster_path

    @property
    def first_air_date(self):
        """Gets the first_air_date of this InlineResponse20084Cast.  # noqa: E501


        :return: The first_air_date of this InlineResponse20084Cast.  # noqa: E501
        :rtype: str
        """
        return self._first_air_date

    @first_air_date.setter
    def first_air_date(self, first_air_date):
        """Sets the first_air_date of this InlineResponse20084Cast.


        :param first_air_date: The first_air_date of this InlineResponse20084Cast.  # noqa: E501
        :type: str
        """

        self._first_air_date = first_air_date

    @property
    def vote_average(self):
        """Gets the vote_average of this InlineResponse20084Cast.  # noqa: E501


        :return: The vote_average of this InlineResponse20084Cast.  # noqa: E501
        :rtype: Object
        """
        return self._vote_average

    @vote_average.setter
    def vote_average(self, vote_average):
        """Sets the vote_average of this InlineResponse20084Cast.


        :param vote_average: The vote_average of this InlineResponse20084Cast.  # noqa: E501
        :type: Object
        """

        self._vote_average = vote_average

    @property
    def vote_count(self):
        """Gets the vote_count of this InlineResponse20084Cast.  # noqa: E501


        :return: The vote_count of this InlineResponse20084Cast.  # noqa: E501
        :rtype: int
        """
        return self._vote_count

    @vote_count.setter
    def vote_count(self, vote_count):
        """Sets the vote_count of this InlineResponse20084Cast.


        :param vote_count: The vote_count of this InlineResponse20084Cast.  # noqa: E501
        :type: int
        """

        self._vote_count = vote_count

    @property
    def character(self):
        """Gets the character of this InlineResponse20084Cast.  # noqa: E501


        :return: The character of this InlineResponse20084Cast.  # noqa: E501
        :rtype: str
        """
        return self._character

    @character.setter
    def character(self, character):
        """Sets the character of this InlineResponse20084Cast.


        :param character: The character of this InlineResponse20084Cast.  # noqa: E501
        :type: str
        """

        self._character = character

    @property
    def backdrop_path(self):
        """Gets the backdrop_path of this InlineResponse20084Cast.  # noqa: E501


        :return: The backdrop_path of this InlineResponse20084Cast.  # noqa: E501
        :rtype: ImagePath
        """
        return self._backdrop_path

    @backdrop_path.setter
    def backdrop_path(self, backdrop_path):
        """Sets the backdrop_path of this InlineResponse20084Cast.


        :param backdrop_path: The backdrop_path of this InlineResponse20084Cast.  # noqa: E501
        :type: ImagePath
        """

        self._backdrop_path = backdrop_path

    @property
    def popularity(self):
        """Gets the popularity of this InlineResponse20084Cast.  # noqa: E501


        :return: The popularity of this InlineResponse20084Cast.  # noqa: E501
        :rtype: float
        """
        return self._popularity

    @popularity.setter
    def popularity(self, popularity):
        """Sets the popularity of this InlineResponse20084Cast.


        :param popularity: The popularity of this InlineResponse20084Cast.  # noqa: E501
        :type: float
        """

        self._popularity = popularity

    @property
    def credit_id(self):
        """Gets the credit_id of this InlineResponse20084Cast.  # noqa: E501


        :return: The credit_id of this InlineResponse20084Cast.  # noqa: E501
        :rtype: str
        """
        return self._credit_id

    @credit_id.setter
    def credit_id(self, credit_id):
        """Sets the credit_id of this InlineResponse20084Cast.


        :param credit_id: The credit_id of this InlineResponse20084Cast.  # noqa: E501
        :type: str
        """

        self._credit_id = credit_id

    @property
    def original_title(self):
        """Gets the original_title of this InlineResponse20084Cast.  # noqa: E501


        :return: The original_title of this InlineResponse20084Cast.  # noqa: E501
        :rtype: str
        """
        return self._original_title

    @original_title.setter
    def original_title(self, original_title):
        """Sets the original_title of this InlineResponse20084Cast.


        :param original_title: The original_title of this InlineResponse20084Cast.  # noqa: E501
        :type: str
        """

        self._original_title = original_title

    @property
    def video(self):
        """Gets the video of this InlineResponse20084Cast.  # noqa: E501


        :return: The video of this InlineResponse20084Cast.  # noqa: E501
        :rtype: bool
        """
        return self._video

    @video.setter
    def video(self, video):
        """Sets the video of this InlineResponse20084Cast.


        :param video: The video of this InlineResponse20084Cast.  # noqa: E501
        :type: bool
        """

        self._video = video

    @property
    def release_date(self):
        """Gets the release_date of this InlineResponse20084Cast.  # noqa: E501


        :return: The release_date of this InlineResponse20084Cast.  # noqa: E501
        :rtype: str
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """Sets the release_date of this InlineResponse20084Cast.


        :param release_date: The release_date of this InlineResponse20084Cast.  # noqa: E501
        :type: str
        """

        self._release_date = release_date

    @property
    def title(self):
        """Gets the title of this InlineResponse20084Cast.  # noqa: E501


        :return: The title of this InlineResponse20084Cast.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this InlineResponse20084Cast.


        :param title: The title of this InlineResponse20084Cast.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def adult(self):
        """Gets the adult of this InlineResponse20084Cast.  # noqa: E501


        :return: The adult of this InlineResponse20084Cast.  # noqa: E501
        :rtype: bool
        """
        return self._adult

    @adult.setter
    def adult(self, adult):
        """Sets the adult of this InlineResponse20084Cast.


        :param adult: The adult of this InlineResponse20084Cast.  # noqa: E501
        :type: bool
        """

        self._adult = adult

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20084Cast, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20084Cast):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
