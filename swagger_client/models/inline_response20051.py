# coding: utf-8

"""
    API

    ## Welcome  This is a place to put general notes and extra information, for internal use.  To get started designing/documenting this API, select a version on the left. # Title No Description  # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class InlineResponse20051(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'credit_type': 'str',
        'department': 'str',
        'job': 'str',
        'media': 'InlineResponse20051Media',
        'media_type': 'str',
        'id': 'str',
        'person': 'InlineResponse20051Person'
    }

    attribute_map = {
        'credit_type': 'credit_type',
        'department': 'department',
        'job': 'job',
        'media': 'media',
        'media_type': 'media_type',
        'id': 'id',
        'person': 'person'
    }

    def __init__(self, credit_type=None, department=None, job=None, media=None, media_type=None, id=None, person=None):  # noqa: E501
        """InlineResponse20051 - a model defined in Swagger"""  # noqa: E501
        self._credit_type = None
        self._department = None
        self._job = None
        self._media = None
        self._media_type = None
        self._id = None
        self._person = None
        self.discriminator = None
        if credit_type is not None:
            self.credit_type = credit_type
        if department is not None:
            self.department = department
        if job is not None:
            self.job = job
        if media is not None:
            self.media = media
        if media_type is not None:
            self.media_type = media_type
        if id is not None:
            self.id = id
        if person is not None:
            self.person = person

    @property
    def credit_type(self):
        """Gets the credit_type of this InlineResponse20051.  # noqa: E501


        :return: The credit_type of this InlineResponse20051.  # noqa: E501
        :rtype: str
        """
        return self._credit_type

    @credit_type.setter
    def credit_type(self, credit_type):
        """Sets the credit_type of this InlineResponse20051.


        :param credit_type: The credit_type of this InlineResponse20051.  # noqa: E501
        :type: str
        """

        self._credit_type = credit_type

    @property
    def department(self):
        """Gets the department of this InlineResponse20051.  # noqa: E501


        :return: The department of this InlineResponse20051.  # noqa: E501
        :rtype: str
        """
        return self._department

    @department.setter
    def department(self, department):
        """Sets the department of this InlineResponse20051.


        :param department: The department of this InlineResponse20051.  # noqa: E501
        :type: str
        """

        self._department = department

    @property
    def job(self):
        """Gets the job of this InlineResponse20051.  # noqa: E501


        :return: The job of this InlineResponse20051.  # noqa: E501
        :rtype: str
        """
        return self._job

    @job.setter
    def job(self, job):
        """Sets the job of this InlineResponse20051.


        :param job: The job of this InlineResponse20051.  # noqa: E501
        :type: str
        """

        self._job = job

    @property
    def media(self):
        """Gets the media of this InlineResponse20051.  # noqa: E501


        :return: The media of this InlineResponse20051.  # noqa: E501
        :rtype: InlineResponse20051Media
        """
        return self._media

    @media.setter
    def media(self, media):
        """Sets the media of this InlineResponse20051.


        :param media: The media of this InlineResponse20051.  # noqa: E501
        :type: InlineResponse20051Media
        """

        self._media = media

    @property
    def media_type(self):
        """Gets the media_type of this InlineResponse20051.  # noqa: E501


        :return: The media_type of this InlineResponse20051.  # noqa: E501
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """Sets the media_type of this InlineResponse20051.


        :param media_type: The media_type of this InlineResponse20051.  # noqa: E501
        :type: str
        """

        self._media_type = media_type

    @property
    def id(self):
        """Gets the id of this InlineResponse20051.  # noqa: E501


        :return: The id of this InlineResponse20051.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20051.


        :param id: The id of this InlineResponse20051.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def person(self):
        """Gets the person of this InlineResponse20051.  # noqa: E501


        :return: The person of this InlineResponse20051.  # noqa: E501
        :rtype: InlineResponse20051Person
        """
        return self._person

    @person.setter
    def person(self, person):
        """Sets the person of this InlineResponse20051.


        :param person: The person of this InlineResponse20051.  # noqa: E501
        :type: InlineResponse20051Person
        """

        self._person = person

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20051, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20051):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
