# coding: utf-8

"""
    API

    ## Welcome  This is a place to put general notes and extra information, for internal use.  To get started designing/documenting this API, select a version on the left. # Title No Description  # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class InlineResponse20087(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'movie_results': 'list[MovieListObject]',
        'person_results': 'list[PersonListResultsObject]',
        'tv_results': 'list[TvListResultObject]',
        'tv_episode_results': 'list[object]',
        'tv_season_results': 'list[object]'
    }

    attribute_map = {
        'movie_results': 'movie_results',
        'person_results': 'person_results',
        'tv_results': 'tv_results',
        'tv_episode_results': 'tv_episode_results',
        'tv_season_results': 'tv_season_results'
    }

    def __init__(self, movie_results=None, person_results=None, tv_results=None, tv_episode_results=None, tv_season_results=None):  # noqa: E501
        """InlineResponse20087 - a model defined in Swagger"""  # noqa: E501
        self._movie_results = None
        self._person_results = None
        self._tv_results = None
        self._tv_episode_results = None
        self._tv_season_results = None
        self.discriminator = None
        if movie_results is not None:
            self.movie_results = movie_results
        if person_results is not None:
            self.person_results = person_results
        if tv_results is not None:
            self.tv_results = tv_results
        if tv_episode_results is not None:
            self.tv_episode_results = tv_episode_results
        if tv_season_results is not None:
            self.tv_season_results = tv_season_results

    @property
    def movie_results(self):
        """Gets the movie_results of this InlineResponse20087.  # noqa: E501


        :return: The movie_results of this InlineResponse20087.  # noqa: E501
        :rtype: list[MovieListObject]
        """
        return self._movie_results

    @movie_results.setter
    def movie_results(self, movie_results):
        """Sets the movie_results of this InlineResponse20087.


        :param movie_results: The movie_results of this InlineResponse20087.  # noqa: E501
        :type: list[MovieListObject]
        """

        self._movie_results = movie_results

    @property
    def person_results(self):
        """Gets the person_results of this InlineResponse20087.  # noqa: E501


        :return: The person_results of this InlineResponse20087.  # noqa: E501
        :rtype: list[PersonListResultsObject]
        """
        return self._person_results

    @person_results.setter
    def person_results(self, person_results):
        """Sets the person_results of this InlineResponse20087.


        :param person_results: The person_results of this InlineResponse20087.  # noqa: E501
        :type: list[PersonListResultsObject]
        """

        self._person_results = person_results

    @property
    def tv_results(self):
        """Gets the tv_results of this InlineResponse20087.  # noqa: E501


        :return: The tv_results of this InlineResponse20087.  # noqa: E501
        :rtype: list[TvListResultObject]
        """
        return self._tv_results

    @tv_results.setter
    def tv_results(self, tv_results):
        """Sets the tv_results of this InlineResponse20087.


        :param tv_results: The tv_results of this InlineResponse20087.  # noqa: E501
        :type: list[TvListResultObject]
        """

        self._tv_results = tv_results

    @property
    def tv_episode_results(self):
        """Gets the tv_episode_results of this InlineResponse20087.  # noqa: E501


        :return: The tv_episode_results of this InlineResponse20087.  # noqa: E501
        :rtype: list[object]
        """
        return self._tv_episode_results

    @tv_episode_results.setter
    def tv_episode_results(self, tv_episode_results):
        """Sets the tv_episode_results of this InlineResponse20087.


        :param tv_episode_results: The tv_episode_results of this InlineResponse20087.  # noqa: E501
        :type: list[object]
        """

        self._tv_episode_results = tv_episode_results

    @property
    def tv_season_results(self):
        """Gets the tv_season_results of this InlineResponse20087.  # noqa: E501


        :return: The tv_season_results of this InlineResponse20087.  # noqa: E501
        :rtype: list[object]
        """
        return self._tv_season_results

    @tv_season_results.setter
    def tv_season_results(self, tv_season_results):
        """Sets the tv_season_results of this InlineResponse20087.


        :param tv_season_results: The tv_season_results of this InlineResponse20087.  # noqa: E501
        :type: list[object]
        """

        self._tv_season_results = tv_season_results

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20087, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20087):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
