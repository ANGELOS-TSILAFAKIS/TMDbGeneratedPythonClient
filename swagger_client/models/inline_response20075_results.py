# coding: utf-8

"""
    API

    ## Welcome  This is a place to put general notes and extra information, for internal use.  To get started designing/documenting this API, select a version on the left. # Title No Description  # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class InlineResponse20075Results(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'iso_639_1': 'str',
        'iso_3166_1': 'str',
        'key': 'str',
        'name': 'str',
        'site': 'str',
        'size': 'int',
        'type': 'str'
    }

    attribute_map = {
        'id': 'id',
        'iso_639_1': 'iso_639_1',
        'iso_3166_1': 'iso_3166_1',
        'key': 'key',
        'name': 'name',
        'site': 'site',
        'size': 'size',
        'type': 'type'
    }

    def __init__(self, id=None, iso_639_1=None, iso_3166_1=None, key=None, name=None, site=None, size=None, type=None):  # noqa: E501
        """InlineResponse20075Results - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._iso_639_1 = None
        self._iso_3166_1 = None
        self._key = None
        self._name = None
        self._site = None
        self._size = None
        self._type = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if iso_639_1 is not None:
            self.iso_639_1 = iso_639_1
        if iso_3166_1 is not None:
            self.iso_3166_1 = iso_3166_1
        if key is not None:
            self.key = key
        if name is not None:
            self.name = name
        if site is not None:
            self.site = site
        if size is not None:
            self.size = size
        if type is not None:
            self.type = type

    @property
    def id(self):
        """Gets the id of this InlineResponse20075Results.  # noqa: E501


        :return: The id of this InlineResponse20075Results.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20075Results.


        :param id: The id of this InlineResponse20075Results.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def iso_639_1(self):
        """Gets the iso_639_1 of this InlineResponse20075Results.  # noqa: E501


        :return: The iso_639_1 of this InlineResponse20075Results.  # noqa: E501
        :rtype: str
        """
        return self._iso_639_1

    @iso_639_1.setter
    def iso_639_1(self, iso_639_1):
        """Sets the iso_639_1 of this InlineResponse20075Results.


        :param iso_639_1: The iso_639_1 of this InlineResponse20075Results.  # noqa: E501
        :type: str
        """

        self._iso_639_1 = iso_639_1

    @property
    def iso_3166_1(self):
        """Gets the iso_3166_1 of this InlineResponse20075Results.  # noqa: E501


        :return: The iso_3166_1 of this InlineResponse20075Results.  # noqa: E501
        :rtype: str
        """
        return self._iso_3166_1

    @iso_3166_1.setter
    def iso_3166_1(self, iso_3166_1):
        """Sets the iso_3166_1 of this InlineResponse20075Results.


        :param iso_3166_1: The iso_3166_1 of this InlineResponse20075Results.  # noqa: E501
        :type: str
        """

        self._iso_3166_1 = iso_3166_1

    @property
    def key(self):
        """Gets the key of this InlineResponse20075Results.  # noqa: E501


        :return: The key of this InlineResponse20075Results.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this InlineResponse20075Results.


        :param key: The key of this InlineResponse20075Results.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def name(self):
        """Gets the name of this InlineResponse20075Results.  # noqa: E501


        :return: The name of this InlineResponse20075Results.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse20075Results.


        :param name: The name of this InlineResponse20075Results.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def site(self):
        """Gets the site of this InlineResponse20075Results.  # noqa: E501


        :return: The site of this InlineResponse20075Results.  # noqa: E501
        :rtype: str
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this InlineResponse20075Results.


        :param site: The site of this InlineResponse20075Results.  # noqa: E501
        :type: str
        """

        self._site = site

    @property
    def size(self):
        """Gets the size of this InlineResponse20075Results.  # noqa: E501


        :return: The size of this InlineResponse20075Results.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this InlineResponse20075Results.


        :param size: The size of this InlineResponse20075Results.  # noqa: E501
        :type: int
        """
        allowed_values = [360, 480, 720, 1080]  # noqa: E501
        if size not in allowed_values:
            raise ValueError(
                "Invalid value for `size` ({0}), must be one of {1}"  # noqa: E501
                .format(size, allowed_values)
            )

        self._size = size

    @property
    def type(self):
        """Gets the type of this InlineResponse20075Results.  # noqa: E501


        :return: The type of this InlineResponse20075Results.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse20075Results.


        :param type: The type of this InlineResponse20075Results.  # noqa: E501
        :type: str
        """
        allowed_values = ["Trailer", "Teaser", "Clip", "Featurette", "Opening Credits", "Behind the Scenes", "Bloopers", "Recap"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20075Results, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20075Results):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
