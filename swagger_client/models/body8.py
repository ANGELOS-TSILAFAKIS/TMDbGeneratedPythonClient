# coding: utf-8

"""
    API

    ## Welcome  This is a place to put general notes and extra information, for internal use.  To get started designing/documenting this API, select a version on the left. # Title No Description  # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Body8(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'media_type': 'str',
        'media_id': 'int',
        'favorite': 'bool'
    }

    attribute_map = {
        'media_type': 'media_type',
        'media_id': 'media_id',
        'favorite': 'favorite'
    }

    def __init__(self, media_type=None, media_id=None, favorite=None):  # noqa: E501
        """Body8 - a model defined in Swagger"""  # noqa: E501
        self._media_type = None
        self._media_id = None
        self._favorite = None
        self.discriminator = None
        self.media_type = media_type
        self.media_id = media_id
        self.favorite = favorite

    @property
    def media_type(self):
        """Gets the media_type of this Body8.  # noqa: E501


        :return: The media_type of this Body8.  # noqa: E501
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """Sets the media_type of this Body8.


        :param media_type: The media_type of this Body8.  # noqa: E501
        :type: str
        """
        if media_type is None:
            raise ValueError("Invalid value for `media_type`, must not be `None`")  # noqa: E501
        allowed_values = ["movie", "tv"]  # noqa: E501
        if media_type not in allowed_values:
            raise ValueError(
                "Invalid value for `media_type` ({0}), must be one of {1}"  # noqa: E501
                .format(media_type, allowed_values)
            )

        self._media_type = media_type

    @property
    def media_id(self):
        """Gets the media_id of this Body8.  # noqa: E501


        :return: The media_id of this Body8.  # noqa: E501
        :rtype: int
        """
        return self._media_id

    @media_id.setter
    def media_id(self, media_id):
        """Sets the media_id of this Body8.


        :param media_id: The media_id of this Body8.  # noqa: E501
        :type: int
        """
        if media_id is None:
            raise ValueError("Invalid value for `media_id`, must not be `None`")  # noqa: E501

        self._media_id = media_id

    @property
    def favorite(self):
        """Gets the favorite of this Body8.  # noqa: E501


        :return: The favorite of this Body8.  # noqa: E501
        :rtype: bool
        """
        return self._favorite

    @favorite.setter
    def favorite(self, favorite):
        """Sets the favorite of this Body8.


        :param favorite: The favorite of this Body8.  # noqa: E501
        :type: bool
        """
        if favorite is None:
            raise ValueError("Invalid value for `favorite`, must not be `None`")  # noqa: E501

        self._favorite = favorite

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body8, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body8):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
