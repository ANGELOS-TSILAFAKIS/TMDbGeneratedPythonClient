# coding: utf-8

"""
    API

    ## Welcome  This is a place to put general notes and extra information, for internal use.  To get started designing/documenting this API, select a version on the left. # Title No Description  # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class InlineResponse20048(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'author': 'str',
        'content': 'str',
        'iso_639_1': 'str',
        'media_id': 'int',
        'media_title': 'str',
        'media_type': 'str',
        'url': 'str'
    }

    attribute_map = {
        'id': 'id',
        'author': 'author',
        'content': 'content',
        'iso_639_1': 'iso_639_1',
        'media_id': 'media_id',
        'media_title': 'media_title',
        'media_type': 'media_type',
        'url': 'url'
    }

    def __init__(self, id=None, author=None, content=None, iso_639_1=None, media_id=None, media_title=None, media_type=None, url=None):  # noqa: E501
        """InlineResponse20048 - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._author = None
        self._content = None
        self._iso_639_1 = None
        self._media_id = None
        self._media_title = None
        self._media_type = None
        self._url = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if author is not None:
            self.author = author
        if content is not None:
            self.content = content
        if iso_639_1 is not None:
            self.iso_639_1 = iso_639_1
        if media_id is not None:
            self.media_id = media_id
        if media_title is not None:
            self.media_title = media_title
        if media_type is not None:
            self.media_type = media_type
        if url is not None:
            self.url = url

    @property
    def id(self):
        """Gets the id of this InlineResponse20048.  # noqa: E501


        :return: The id of this InlineResponse20048.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20048.


        :param id: The id of this InlineResponse20048.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def author(self):
        """Gets the author of this InlineResponse20048.  # noqa: E501


        :return: The author of this InlineResponse20048.  # noqa: E501
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this InlineResponse20048.


        :param author: The author of this InlineResponse20048.  # noqa: E501
        :type: str
        """

        self._author = author

    @property
    def content(self):
        """Gets the content of this InlineResponse20048.  # noqa: E501


        :return: The content of this InlineResponse20048.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this InlineResponse20048.


        :param content: The content of this InlineResponse20048.  # noqa: E501
        :type: str
        """

        self._content = content

    @property
    def iso_639_1(self):
        """Gets the iso_639_1 of this InlineResponse20048.  # noqa: E501


        :return: The iso_639_1 of this InlineResponse20048.  # noqa: E501
        :rtype: str
        """
        return self._iso_639_1

    @iso_639_1.setter
    def iso_639_1(self, iso_639_1):
        """Sets the iso_639_1 of this InlineResponse20048.


        :param iso_639_1: The iso_639_1 of this InlineResponse20048.  # noqa: E501
        :type: str
        """

        self._iso_639_1 = iso_639_1

    @property
    def media_id(self):
        """Gets the media_id of this InlineResponse20048.  # noqa: E501


        :return: The media_id of this InlineResponse20048.  # noqa: E501
        :rtype: int
        """
        return self._media_id

    @media_id.setter
    def media_id(self, media_id):
        """Sets the media_id of this InlineResponse20048.


        :param media_id: The media_id of this InlineResponse20048.  # noqa: E501
        :type: int
        """

        self._media_id = media_id

    @property
    def media_title(self):
        """Gets the media_title of this InlineResponse20048.  # noqa: E501


        :return: The media_title of this InlineResponse20048.  # noqa: E501
        :rtype: str
        """
        return self._media_title

    @media_title.setter
    def media_title(self, media_title):
        """Sets the media_title of this InlineResponse20048.


        :param media_title: The media_title of this InlineResponse20048.  # noqa: E501
        :type: str
        """

        self._media_title = media_title

    @property
    def media_type(self):
        """Gets the media_type of this InlineResponse20048.  # noqa: E501


        :return: The media_type of this InlineResponse20048.  # noqa: E501
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """Sets the media_type of this InlineResponse20048.


        :param media_type: The media_type of this InlineResponse20048.  # noqa: E501
        :type: str
        """

        self._media_type = media_type

    @property
    def url(self):
        """Gets the url of this InlineResponse20048.  # noqa: E501


        :return: The url of this InlineResponse20048.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this InlineResponse20048.


        :param url: The url of this InlineResponse20048.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20048, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20048):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
