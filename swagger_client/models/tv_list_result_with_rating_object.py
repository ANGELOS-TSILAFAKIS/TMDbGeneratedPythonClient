# coding: utf-8

"""
    API

    ## Welcome  This is a place to put general notes and extra information, for internal use.  To get started designing/documenting this API, select a version on the left. # Title No Description  # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class TvListResultWithRatingObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'backdrop_path': 'ImagePath',
        'first_air_date': 'str',
        'genre_ids': 'list[int]',
        'id': 'int',
        'original_language': 'str',
        'original_name': 'str',
        'overview': 'str',
        'origin_country': 'list[str]',
        'poster_path': 'ImagePath',
        'popularity': 'float',
        'name': 'str',
        'vote_average': 'float',
        'vote_count': 'int',
        'rating': 'int'
    }

    attribute_map = {
        'backdrop_path': 'backdrop_path',
        'first_air_date': 'first_air_date',
        'genre_ids': 'genre_ids',
        'id': 'id',
        'original_language': 'original_language',
        'original_name': 'original_name',
        'overview': 'overview',
        'origin_country': 'origin_country',
        'poster_path': 'poster_path',
        'popularity': 'popularity',
        'name': 'name',
        'vote_average': 'vote_average',
        'vote_count': 'vote_count',
        'rating': 'rating'
    }

    def __init__(self, backdrop_path=None, first_air_date=None, genre_ids=None, id=None, original_language=None, original_name=None, overview=None, origin_country=None, poster_path=None, popularity=None, name=None, vote_average=None, vote_count=None, rating=None):  # noqa: E501
        """TvListResultWithRatingObject - a model defined in Swagger"""  # noqa: E501
        self._backdrop_path = None
        self._first_air_date = None
        self._genre_ids = None
        self._id = None
        self._original_language = None
        self._original_name = None
        self._overview = None
        self._origin_country = None
        self._poster_path = None
        self._popularity = None
        self._name = None
        self._vote_average = None
        self._vote_count = None
        self._rating = None
        self.discriminator = None
        if backdrop_path is not None:
            self.backdrop_path = backdrop_path
        if first_air_date is not None:
            self.first_air_date = first_air_date
        if genre_ids is not None:
            self.genre_ids = genre_ids
        if id is not None:
            self.id = id
        if original_language is not None:
            self.original_language = original_language
        if original_name is not None:
            self.original_name = original_name
        if overview is not None:
            self.overview = overview
        if origin_country is not None:
            self.origin_country = origin_country
        if poster_path is not None:
            self.poster_path = poster_path
        if popularity is not None:
            self.popularity = popularity
        if name is not None:
            self.name = name
        if vote_average is not None:
            self.vote_average = vote_average
        if vote_count is not None:
            self.vote_count = vote_count
        if rating is not None:
            self.rating = rating

    @property
    def backdrop_path(self):
        """Gets the backdrop_path of this TvListResultWithRatingObject.  # noqa: E501


        :return: The backdrop_path of this TvListResultWithRatingObject.  # noqa: E501
        :rtype: ImagePath
        """
        return self._backdrop_path

    @backdrop_path.setter
    def backdrop_path(self, backdrop_path):
        """Sets the backdrop_path of this TvListResultWithRatingObject.


        :param backdrop_path: The backdrop_path of this TvListResultWithRatingObject.  # noqa: E501
        :type: ImagePath
        """

        self._backdrop_path = backdrop_path

    @property
    def first_air_date(self):
        """Gets the first_air_date of this TvListResultWithRatingObject.  # noqa: E501


        :return: The first_air_date of this TvListResultWithRatingObject.  # noqa: E501
        :rtype: str
        """
        return self._first_air_date

    @first_air_date.setter
    def first_air_date(self, first_air_date):
        """Sets the first_air_date of this TvListResultWithRatingObject.


        :param first_air_date: The first_air_date of this TvListResultWithRatingObject.  # noqa: E501
        :type: str
        """

        self._first_air_date = first_air_date

    @property
    def genre_ids(self):
        """Gets the genre_ids of this TvListResultWithRatingObject.  # noqa: E501


        :return: The genre_ids of this TvListResultWithRatingObject.  # noqa: E501
        :rtype: list[int]
        """
        return self._genre_ids

    @genre_ids.setter
    def genre_ids(self, genre_ids):
        """Sets the genre_ids of this TvListResultWithRatingObject.


        :param genre_ids: The genre_ids of this TvListResultWithRatingObject.  # noqa: E501
        :type: list[int]
        """

        self._genre_ids = genre_ids

    @property
    def id(self):
        """Gets the id of this TvListResultWithRatingObject.  # noqa: E501


        :return: The id of this TvListResultWithRatingObject.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TvListResultWithRatingObject.


        :param id: The id of this TvListResultWithRatingObject.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def original_language(self):
        """Gets the original_language of this TvListResultWithRatingObject.  # noqa: E501


        :return: The original_language of this TvListResultWithRatingObject.  # noqa: E501
        :rtype: str
        """
        return self._original_language

    @original_language.setter
    def original_language(self, original_language):
        """Sets the original_language of this TvListResultWithRatingObject.


        :param original_language: The original_language of this TvListResultWithRatingObject.  # noqa: E501
        :type: str
        """

        self._original_language = original_language

    @property
    def original_name(self):
        """Gets the original_name of this TvListResultWithRatingObject.  # noqa: E501


        :return: The original_name of this TvListResultWithRatingObject.  # noqa: E501
        :rtype: str
        """
        return self._original_name

    @original_name.setter
    def original_name(self, original_name):
        """Sets the original_name of this TvListResultWithRatingObject.


        :param original_name: The original_name of this TvListResultWithRatingObject.  # noqa: E501
        :type: str
        """

        self._original_name = original_name

    @property
    def overview(self):
        """Gets the overview of this TvListResultWithRatingObject.  # noqa: E501


        :return: The overview of this TvListResultWithRatingObject.  # noqa: E501
        :rtype: str
        """
        return self._overview

    @overview.setter
    def overview(self, overview):
        """Sets the overview of this TvListResultWithRatingObject.


        :param overview: The overview of this TvListResultWithRatingObject.  # noqa: E501
        :type: str
        """

        self._overview = overview

    @property
    def origin_country(self):
        """Gets the origin_country of this TvListResultWithRatingObject.  # noqa: E501


        :return: The origin_country of this TvListResultWithRatingObject.  # noqa: E501
        :rtype: list[str]
        """
        return self._origin_country

    @origin_country.setter
    def origin_country(self, origin_country):
        """Sets the origin_country of this TvListResultWithRatingObject.


        :param origin_country: The origin_country of this TvListResultWithRatingObject.  # noqa: E501
        :type: list[str]
        """

        self._origin_country = origin_country

    @property
    def poster_path(self):
        """Gets the poster_path of this TvListResultWithRatingObject.  # noqa: E501


        :return: The poster_path of this TvListResultWithRatingObject.  # noqa: E501
        :rtype: ImagePath
        """
        return self._poster_path

    @poster_path.setter
    def poster_path(self, poster_path):
        """Sets the poster_path of this TvListResultWithRatingObject.


        :param poster_path: The poster_path of this TvListResultWithRatingObject.  # noqa: E501
        :type: ImagePath
        """

        self._poster_path = poster_path

    @property
    def popularity(self):
        """Gets the popularity of this TvListResultWithRatingObject.  # noqa: E501


        :return: The popularity of this TvListResultWithRatingObject.  # noqa: E501
        :rtype: float
        """
        return self._popularity

    @popularity.setter
    def popularity(self, popularity):
        """Sets the popularity of this TvListResultWithRatingObject.


        :param popularity: The popularity of this TvListResultWithRatingObject.  # noqa: E501
        :type: float
        """

        self._popularity = popularity

    @property
    def name(self):
        """Gets the name of this TvListResultWithRatingObject.  # noqa: E501


        :return: The name of this TvListResultWithRatingObject.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TvListResultWithRatingObject.


        :param name: The name of this TvListResultWithRatingObject.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def vote_average(self):
        """Gets the vote_average of this TvListResultWithRatingObject.  # noqa: E501


        :return: The vote_average of this TvListResultWithRatingObject.  # noqa: E501
        :rtype: float
        """
        return self._vote_average

    @vote_average.setter
    def vote_average(self, vote_average):
        """Sets the vote_average of this TvListResultWithRatingObject.


        :param vote_average: The vote_average of this TvListResultWithRatingObject.  # noqa: E501
        :type: float
        """

        self._vote_average = vote_average

    @property
    def vote_count(self):
        """Gets the vote_count of this TvListResultWithRatingObject.  # noqa: E501


        :return: The vote_count of this TvListResultWithRatingObject.  # noqa: E501
        :rtype: int
        """
        return self._vote_count

    @vote_count.setter
    def vote_count(self, vote_count):
        """Sets the vote_count of this TvListResultWithRatingObject.


        :param vote_count: The vote_count of this TvListResultWithRatingObject.  # noqa: E501
        :type: int
        """

        self._vote_count = vote_count

    @property
    def rating(self):
        """Gets the rating of this TvListResultWithRatingObject.  # noqa: E501


        :return: The rating of this TvListResultWithRatingObject.  # noqa: E501
        :rtype: int
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this TvListResultWithRatingObject.


        :param rating: The rating of this TvListResultWithRatingObject.  # noqa: E501
        :type: int
        """

        self._rating = rating

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TvListResultWithRatingObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TvListResultWithRatingObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
